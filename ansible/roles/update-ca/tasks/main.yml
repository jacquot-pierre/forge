---
- name: Include vault variables from pki roles
  ansible.builtin.include_vars:
    file: roles/pki/vars/vault.yml

- name: Update packages and install dependencies
  ansible.builtin.apt:
    name:
      - curl
      - vim
      - gpg
      - ca-certificates
    state: present
    update_cache: yes

- name: Download and add Smallstep GPG key
  ansible.builtin.get_url:
    url: https://packages.smallstep.com/keys/apt/repo-signing-key.gpg
    dest: /etc/apt/trusted.gpg.d/smallstep.asc
    mode: '0644' # Ensure permissions are correct

- name: Add Smallstep repository to APT sources
  ansible.builtin.apt_repository:
    repo: 'deb [signed-by=/etc/apt/trusted.gpg.d/smallstep.asc] https://packages.smallstep.com/stable/debian debs main'
    state: present
    filename: smallstep # Creates /etc/apt/sources.list.d/smallstep.list/etc/apt/trusted.gpg.d/smallstep.asc

- name: Install step-cli
  ansible.builtin.apt:
    name:
      - step-cli
    state: present
    update_cache: yes # Update APT cache after adding the repository

- name: Ensure step-cli is installed
  ansible.builtin.apt:
    name: step-cli
    state: present
    update_cache: yes

- name: Ensure .step directory exists for current user
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.step"
    state: directory
    mode: '0700'

# https://smallstep.com/docs/step-ca/getting-started/#access-your-ca-remotely
- name: Bootstrap step-cli with CA
  ansible.builtin.command:
    cmd: "step ca bootstrap --ca-url https://pki.guerande.local.net:9000 --fingerprint {{ pki_server_fingerprint }}"
    creates: "{{ ansible_env.HOME }}/.step/config/defaults.json"
  environment:
    STEPPATH: "{{ ansible_env.HOME }}/.step"

# https://smallstep.com/docs/step-ca/getting-started/#access-your-ca-remotely
- name: Bootstrap step-cli with CA
  ansible.builtin.command:
    cmd: "step certificate install {{ ansible_env.HOME }}/.step/certs/root_ca.crt"

# - name: Create temporary file for provisioner password
#   ansible.builtin.copy:
#     content: "{{ pki_step_ca_provider_password }}"
#     dest: "{{ ansible_env.HOME }}/.step/provisioner_password.txt"
#     mode: '0600'
#   no_log: true # Important: Do not log sensitive content

# - name: Generate wildcard certificate for HAProxy
#   ansible.builtin.command:
#     cmd: >
#       step ca certificate "*.guerande.local.net"
#       "{{ ansible_env.HOME }}/.step/wildcard.crt"
#       "{{ ansible_env.HOME }}/.step/wildcard.key"
#       --provisioner homelab-acme
#       --password-file "{{ ansible_env.HOME }}/.step/provisioner_password.txt"
#   args:
#     creates: "{{ ansible_env.HOME }}/.step/wildcard.crt"
#   environment:
#     STEPPATH: "{{ ansible_env.HOME }}/.step"

# - name: Ensure HAProxy certs directory exists
#   ansible.builtin.file:
#     path: /etc/haproxy/certs
#     state: directory
#     owner: root
#     group: root
#     mode: '0755'

# - name: Assemble HAProxy PEM file
#   ansible.builtin.shell: |
#     cat "{{ ansible_env.HOME }}/.step/wildcard.key" "{{ ansible_env.HOME }}/.step/wildcard.crt" > /etc/haproxy/certs/guerande.local.net.pem
#   args:
#     creates: /etc/haproxy/certs/guerande.local.net.pem
#   notify: restart haproxy

# - name: Clean up temporary password file
#   ansible.builtin.file:
#     path: "{{ ansible_env.HOME }}/.step/provisioner_password.txt"
#     state: absent

# - name: Clean up temporary cert and key files
#   ansible.builtin.file:
#     path: "{{ item }}"
#     state: absent
#   loop:
#     - "{{ ansible_env.HOME }}/.step/wildcard.crt"
#     - "{{ ansible_env.HOME }}/.step/wildcard.key"
